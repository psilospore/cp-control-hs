import TaxiPLSM as TPLSM
import DataGenerator as DG
import PrismAST as PAST
import CorrErrModel as CEM

def error_corr_experiment(n,datafile):
    crash = PAST.PrismProp("P=? [F (pc=6 | pc=7)]","bin/TaxiPLSMCrash.pctl")

    # TODO: add test that dyn_fail prob is 0 for all models
    dyn_fail = PAST.PrismProp("P=? [F (pc=8)]","bin/TaxiPLSMDynFail.pc")

    consts = {"N":5}
    
    cte_sample_files = ["lib/cte_corr_pos.csv",
                        "lib/cte_corr_neg.csv",
                        "lib/cte_uncorr.csv"]
    
    he_sample_files = ["lib/he_corr_pos.csv",
                       "lib/he_corr_neg.csv",
                       "lib/he_uncorr.csv"]

    results = [] # (cte_corr,he_corr,cm_crash_prob,ce_crash_prob)
    res_rep = "cte_corr,he_corr,ce_crash,cm_crash\n"
    for i in range(n):
        DG.generate()
        
        for cte_file in cte_sample_files:
            for he_file in he_sample_files:
                cte_corr=CEM.CorrErrModel(cte_file).error_corr()
                he_corr=CEM.CorrErrModel(he_file).error_corr()
                                
                ce_model = TPLSM.create_TaxiPLSM_CE(f"EC_exp_{i}",cte_file,he_file)
                cm_model = TPLSM.create_TaxiPLSM_CM(f"EC_exp_{i}",cte_file,he_file)

                ce_crash_prob = ce_model.test_property(crash,consts)
                cm_crash_prob = cm_model.test_property(crash,consts)

                results.append((cte_corr,he_corr,ce_crash_prob,cm_crash_prob))
                line_rep=f"{cte_corr},{he_corr},{ce_crash_prob},{cm_crash_prob}"
                print(line_rep)
                res_rep+=line_rep+"\n"
                
    with open(datafile,"w") as dfile:
        dfile.write(res_rep)
        

# generated by 4o
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import numpy as np

def linear_regression(csv_file):
    # Step 1: Read the CSV file
    df = pd.read_csv(csv_file)

    # Step 2: Compute the target variable ce_crash - cm_crash
    df['Target'] = df['ce_crash'] - df['cm_crash']

    # Step 3: Prepare predictor variables (cte_corr, he_corr) and target variable (ce_crash - cm_crash)
    X = df[['cte_corr', 'he_corr']]  # Predictor variables
    y = df['Target']    # Target variable

    # Step 4: Split the data into training and testing sets
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Step 5: Perform linear regression
    model = LinearRegression()
    model.fit(X_train, y_train)

    # Step 6: Evaluate the model
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)

    # Print results
    print("Linear Regression Results:")
    print(f"Coefficients: {model.coef_}")
    print(f"Intercept: {model.intercept_}")
    print(f"Mean Squared Error: {mse}")
    print(f"R-squared: {r2}")

    fig = plt.figure(figsize=(10, 7))
    ax = fig.add_subplot(111, projection='3d')
    # Scatter plot of the actual data
    ax.scatter(df['cte_corr'], df['he_corr'], df['Target'], color='blue', label='Actual Data')

    # Create a mesh grid for the regression plane
    w_range = np.linspace(df['cte_corr'].min(), df['cte_corr'].max(), 30)
    x_range = np.linspace(df['he_corr'].min(), df['he_corr'].max(), 30)
    w_mesh, x_mesh = np.meshgrid(w_range, x_range)
    y_mesh = model.coef_[0] * w_mesh + model.coef_[1] * x_mesh + model.intercept_

    # Plot the regression plane
    ax.plot_surface(w_mesh, x_mesh, y_mesh, color='orange', alpha=0.5, label='Regression Plane')

    # # Set plot labels and title
    # ax.set_xlabel('cte_corr')
    # ax.set_ylabel('he_corr')
    # ax.set_zlabel('crash prob diff')
    # ax.set_title('Crash probibility difference of CM and CE models from consecutive perception error correlation')
    # ax.legend()

    plt.show()
    
    return model

if __name__ == "__main__":
    import sys
    if len(sys.argv)<3:
        print("usage: CorrExperiment.py <exp-count> <datafile>")

    error_corr_experiment(int(sys.argv[1]),sys.argv[2])
    model = linear_regression(sys.argv[2])
                
    
    
